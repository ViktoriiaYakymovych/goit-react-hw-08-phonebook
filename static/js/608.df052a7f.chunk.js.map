{"version":3,"file":"static/js/608.df052a7f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/Section/Section.jsx","components/Section/Section.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\nwidth: 320px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 16px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid black;\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    border-color: green;\n  }\n`;\n","import { StyledMain, StyledSection } from \"./Section.styled\";\n\nexport const Section = ({title, children}) => {\nreturn (\n  <StyledMain>\n    <StyledSection>\n      <h2>{title}</h2>\n      {children}\n    </StyledSection>\n  </StyledMain>\n);\n}","import styled from 'styled-components';\n\nexport const StyledMain = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\nexport const StyledSection = styled.section`\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  justify-content: center;\n  align-items: center;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisebleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nimport {\n  StyledForm,\n  Label,\n  StyledField,\n  StyledError,\n  Button,\n} from './ContactForm.styled';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Name is required field').trim(),\n  number: Yup.number()\n    .typeError('Must be a number')\n    .required('Number is a required field'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const addNewContact = newContact => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === newContact.name.toLowerCase() ||\n          contact.number === newContact.number\n      )\n    ) {\n      return toast.error(\n        `${newContact.name} or ${newContact.number} is already added to Your contact's list`\n      );\n    }\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        addNewContact(values);\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <Label>\n          Name\n          <StyledField name=\"name\" type=\"text\" placeholder=\"Name...\" />\n          <StyledError component=\"div\" name=\"name\" />\n        </Label>\n        <Label>\n          Phone\n          <StyledField name=\"number\" type=\"tel\" placeholder=\"Phone...\" />\n          <StyledError component=\"div\" name=\"number\" />\n        </Label>\n        <Button type=\"submit\">Add new Contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\njustify-content: center;\nalign-items: center;\npadding: 4px;\nborder: 1px solid black;\n`\n\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid black;\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    border-color: green;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { ListWrapper, Button } from './ContactCard.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactCard = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ListWrapper>\n      <p>{name}</p>\n      <p>{number}</p>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </ListWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\nflex-direction: column;\ngap: 8px;\n`","import { useSelector } from 'react-redux';\nimport { selectVisebleContacts } from '../../redux/contacts/selectors';\nimport { ContactCard } from 'components/ContactCard/ContactCard';\nimport { StyledList } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisebleContacts);\n\n  return (\n    <StyledList>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <ContactCard contact={contact} />\n        </li>\n      ))}\n    </StyledList>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Section } from '../../components/Section/Section';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section title=\"Phonebook\">\n      <Helmet title=\"Phonebook\">\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <ContactList />\n    </Section>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","StyledField","Field","_templateObject3","StyledError","ErrorMessage","_templateObject4","Button","_templateObject5","Section","_ref","title","children","_jsx","StyledMain","_jsxs","StyledSection","selectContacts","state","contacts","selectVisebleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","schema","Yup","shape","required","trim","number","typeError","ContactForm","useSelector","dispatch","useDispatch","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","find","toast","concat","addContact","addNewContact","resetForm","type","placeholder","component","ListWrapper","ContactCard","_ref$contact","id","onClick","deleteContact","StyledList","ContactList","map","useEffect","fetchContacts","Helmet"],"sourceRoot":""}