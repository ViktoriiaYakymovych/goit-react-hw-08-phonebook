{"version":3,"file":"static/js/980.45c9e4b4.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisebleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { ErrorMessage, Field, Form } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const StyledForm = styled(Form)`\ndisplay: flex;\nflex-direction: column;\ngap: 16px;\npadding: 16px;\n`\n\nexport const Lable = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 4px;\n`\n\nexport const StyledField = styled(Field)`\npadding: 4px;\n`\n\nexport const StyledError = styled(ErrorMessage)`\ncolor: red;\n`\n\nexport const Button = styled.button`\npadding: 4px;\nborder: 1px solid black;\nbackground-color: transparent;\n&:hover, &:focus {\n    border-color: green;\n}\n`","import { useDispatch, useSelector } from 'react-redux';\nimport toast from 'react-hot-toast';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nimport {\n  StyledForm,\n  Lable,\n  StyledField,\n  StyledError,\n  Button,\n} from './ContactForm.styled';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Name is required field').trim(),\n  number: Yup.number()\n    .typeError('Must be a number')\n    .required('Number is a required field'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const addNewContact = newContact => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === newContact.name.toLowerCase() ||\n          contact.number === newContact.number\n      )\n    ) {\n      return toast.error(\n        `${newContact.name} or ${newContact.number} is already added to Your contact's list`\n      );\n    }\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        addNewContact(values);\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <Lable>\n          Name\n          <StyledField name=\"name\" type=\"text\" placeholder=\"Name...\" />\n          <StyledError component=\"div\" name=\"name\" />\n        </Lable>\n        <Lable>\n          Phone\n          <StyledField name=\"number\" type=\"tel\" placeholder=\"Phone...\" />\n          <StyledError component=\"div\" name=\"number\" />\n        </Lable>\n        <Button type=\"submit\">Add new Contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\njustify-content: center;\nalign-items: center;\npadding: 4px;\nborder: 1px solid black;\n`\n\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid black;\n  background-color: transparent;\n  &:hover,\n  &:focus {\n    border-color: green;\n  }\n`;","import { useDispatch } from 'react-redux';\nimport { ListWrapper, Button } from './ContactCard.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactCard = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ListWrapper>\n      <p>{name}</p>\n      <p>{number}</p>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </ListWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\nflex-direction: column;\ngap: 8px;\n`","import { useSelector } from 'react-redux';\nimport { selectVisebleContacts } from '../../redux/contacts/selectors';\nimport { ContactCard } from 'components/ContactCard/ContactCard';\nimport { StyledList } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisebleContacts);\n\n  return (\n    <StyledList>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          <ContactCard contact={contact} />\n        </li>\n      ))}\n    </StyledList>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactList } from '../../components/ContactList/ContactList';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectVisebleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","Lable","_templateObject2","StyledField","Field","_templateObject3","StyledError","ErrorMessage","_templateObject4","Button","_templateObject5","schema","Yup","shape","required","trim","number","typeError","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","find","toast","concat","addContact","addNewContact","resetForm","children","_jsxs","type","placeholder","component","ListWrapper","ContactCard","_ref","_ref$contact","id","onClick","deleteContact","StyledList","ContactList","map","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}